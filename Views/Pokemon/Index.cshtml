@model PokemonWebApp.Models.ViewModels.PokemonIndexViewModel

@{
    ViewData["Title"] = "Pok√©dex - Lista de Pok√©mon";
}

<div class="container-fluid">
    <!-- Encabezado mejorado -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="text-center pokemon-header">
                <h1 class="display-4 text-gradient">
                    <i class="fas fa-paw me-2"></i>Pok√©dex Avanzado
                </h1>
                <p class="lead text-muted">Explora el mundo de los Pok√©mon con filtros avanzados</p>
                @if (Model.HasFilters)
                {
                    <div class="alert alert-info d-inline-block">
                        <i class="fas fa-filter me-1"></i>
                        <strong>Filtros activos:</strong>
                        @if (!string.IsNullOrEmpty(Model.NameFilter))
                        {
                            <span class="badge bg-primary me-1">Nombre: @Model.NameFilter</span>
                        }
                        @if (!string.IsNullOrEmpty(Model.TypeFilter))
                        {
                            <span class="badge bg-success me-1">Tipo: @Model.TypeFilter</span>
                        }
                        @if (Model.MinHeight.HasValue || Model.MaxHeight.HasValue)
                        {
                            <span class="badge bg-warning me-1">
                                Altura: @(Model.MinHeight?.ToString() ?? "0") - @(Model.MaxHeight?.ToString() ?? "‚àû")
                            </span>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Secci√≥n de Filtros Avanzados -->
    <div class="card filter-card mb-4">
        <div class="card-header bg-gradient-primary text-white">
            <h5 class="mb-0 d-flex align-items-center">
                <i class="fas fa-search me-2"></i>
                Filtros de B√∫squeda Avanzados
                <button class="btn btn-sm btn-outline-light ms-auto" type="button" data-bs-toggle="collapse" data-bs-target="#filtersCollapse">
                    <i class="fas fa-chevron-down"></i>
                </button>
            </h5>
        </div>
        <div class="collapse show" id="filtersCollapse">
            <div class="card-body">
                <form method="get" asp-controller="Pokemon" asp-action="Index" id="filterForm">
                    <div class="row g-3">
                        <!-- Filtro por nombre con autocompletado -->
                        <div class="col-md-6 col-lg-3">
                            <label for="nameFilter" class="form-label">
                                <i class="fas fa-signature text-primary"></i> Buscar por nombre:
                            </label>
                            <div class="input-group">
                                <input type="text" 
                                       class="form-control" 
                                       id="nameFilter" 
                                       name="nameFilter" 
                                       value="@Model.NameFilter" 
                                       placeholder="Ej: pikachu"
                                       autocomplete="off">
                                <button class="btn btn-outline-secondary" type="button" onclick="clearField('nameFilter')">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div id="nameAutocomplete" class="autocomplete-dropdown"></div>
                        </div>

                        <!-- Filtro por tipo -->
                        <div class="col-md-6 col-lg-3">
                            <label for="typeFilter" class="form-label">
                                <i class="fas fa-tags text-success"></i> Filtrar por tipo:
                            </label>
                            <select class="form-select" id="typeFilter" name="typeFilter">
                                <option value="">Todos los tipos</option>
                                @foreach (var type in Model.TypeOptions)
                                {
                                    <option value="@type.Name" selected="@(type.Name == Model.TypeFilter)">
                                        @type.DisplayName
                                    </option>
                                }
                            </select>
                        </div>

                        <!-- Filtros de altura -->
                        <div class="col-md-6 col-lg-2">
                            <label for="minHeight" class="form-label">
                                <i class="fas fa-arrows-alt-v text-warning"></i> Altura m√≠n:
                            </label>
                            <div class="input-group">
                                <input type="number" 
                                       class="form-control" 
                                       id="minHeight" 
                                       name="minHeight" 
                                       value="@Model.MinHeight" 
                                       placeholder="0"
                                       min="0"
                                       max="500">
                                <span class="input-group-text">dm</span>
                            </div>
                            <small class="text-muted">dec√≠metros</small>
                        </div>

                        <div class="col-md-6 col-lg-2">
                            <label for="maxHeight" class="form-label">
                                <i class="fas fa-arrows-alt-v text-warning"></i> Altura m√°x:
                            </label>
                            <div class="input-group">
                                <input type="number" 
                                       class="form-control" 
                                       id="maxHeight" 
                                       name="maxHeight" 
                                       value="@Model.MaxHeight" 
                                       placeholder="500"
                                       min="0"
                                       max="500">
                                <span class="input-group-text">dm</span>
                            </div>
                            <small class="text-muted">dec√≠metros</small>
                        </div>

                        <!-- Botones de acci√≥n -->
                        <div class="col-lg-2 d-flex align-items-end">
                            <div class="btn-group w-100" role="group">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-search"></i> Buscar
                                </button>
                                <a href="@Url.Action("Index", "Pokemon")" class="btn btn-outline-secondary">
                                    <i class="fas fa-times"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Mostrar error si existe -->
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong>Error:</strong> @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Informaci√≥n de resultados y acciones -->
    @if (Model.Pokemons.Any())
    {
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="results-info">
                    <h6 class="text-muted mb-1">
                        <i class="fas fa-list-ol me-1"></i>
                        Mostrando @Model.StartIndex - @Model.EndIndex de @Model.TotalCount Pok√©mon
                    </h6>
                    @if (Model.HasFilters)
                    {
                        <small class="text-info">
                            <i class="fas fa-info-circle me-1"></i>
                            Resultados filtrados
                        </small>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div class="action-buttons text-end">
                    <!-- Checkbox para seleccionar todos -->
                    <div class="form-check form-check-inline me-3">
                        <input class="form-check-input" type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                        <label class="form-check-label" for="selectAll">
                            <small>Seleccionar todos</small>
                        </label>
                    </div>

                    <!-- Contador de seleccionados -->
                    <small class="text-muted me-3" id="selectedCount">0 seleccionados</small>

                    <!-- Botones de acci√≥n -->
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-success" onclick="exportSelectedToExcel()" title="Exportar seleccionados a Excel">
                            <i class="fas fa-file-excel me-1"></i>
                            <span class="d-none d-sm-inline">Excel</span>
                        </button>
                        <button type="button" class="btn btn-outline-success" onclick="exportCurrentPageToExcel()" title="Exportar p√°gina actual">
                            <i class="fas fa-file-excel me-1"></i>
                            <span class="d-none d-sm-inline">P√°gina</span>
                        </button>
                        <!-- üÜï ACTUALIZADO: Bot√≥n para email masivo -->
                        <button type="button" class="btn btn-info" onclick="openMultipleEmailModal()" title="Enviar emails masivos">
                            <i class="fas fa-envelope me-1"></i>
                            <span class="d-none d-sm-inline">Email</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Grid de Pok√©mon mejorado -->
        <div class="row pokemon-grid" id="pokemonGrid">
            @foreach (var pokemon in Model.Pokemons)
            {
                <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card pokemon-card h-100" data-pokemon-id="@pokemon.Id">
                        <!-- Checkbox de selecci√≥n -->
                        <div class="card-selector">
                            <input type="checkbox" class="form-check-input pokemon-checkbox" value="@pokemon.Id">
                        </div>

                        <!-- Imagen del Pok√©mon con mejor dise√±o -->
                        <div class="pokemon-image-container">
                            @if (!string.IsNullOrEmpty(pokemon.ImageUrl))
                            {
                                <img src="@pokemon.ImageUrl" 
                                     alt="@pokemon.DisplayName" 
                                     class="pokemon-image"
                                     loading="lazy"
                                     onerror="this.src='/images/pokemon-placeholder.png'">
                            }
                            else
                            {
                                <div class="pokemon-placeholder">
                                    <i class="fas fa-question-circle fa-3x text-white-50"></i>
                                </div>
                            }
                            
                            <!-- Badge del ID -->
                            <span class="pokemon-id-badge">#@pokemon.Id.ToString("D3")</span>
                        </div>

                        <!-- Informaci√≥n del Pok√©mon -->
                        <div class="card-body p-3">
                            <h6 class="card-title text-center pokemon-name">
                                @pokemon.DisplayName
                            </h6>
                            
                            <div class="pokemon-stats">
                                <!-- Tipos con colores -->
                                <div class="pokemon-types mb-2">
                                    @foreach (var type in pokemon.Types)
                                    {
                                        <span class="badge pokemon-type type-@type.Type.Name">
                                            @char.ToUpper(type.Type.Name[0])@type.Type.Name.Substring(1)
                                        </span>
                                    }
                                </div>

                                <!-- Stats b√°sicas -->
                                <div class="pokemon-basic-stats">
                                    <small class="text-muted d-block">
                                        <i class="fas fa-arrows-alt-v me-1"></i>
                                        @(pokemon.Height / 10.0)m
                                    </small>
                                    <small class="text-muted d-block">
                                        <i class="fas fa-weight me-1"></i>
                                        @(pokemon.Weight / 10.0)kg
                                    </small>
                                </div>
                            </div>
                        </div>

                        <!-- Botones de acci√≥n -->
                        <div class="card-footer p-2">
                            <div class="btn-group w-100" role="group">
                                <button type="button" 
                                        class="btn btn-outline-primary btn-sm" 
                                        onclick="showPokemonDetails(@pokemon.Id)"
                                        title="Ver detalles">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button type="button" 
                                        class="btn btn-outline-success btn-sm" 
                                        onclick="exportSingleToExcel(@pokemon.Id, '@pokemon.DisplayName')"
                                        title="Exportar a Excel">
                                    <i class="fas fa-download"></i>
                                </button>
                                <!-- Bot√≥n para email individual -->
                                <button type="button" 
                                        class="btn btn-outline-info btn-sm" 
                                        onclick="openEmailModal(@pokemon.Id, '@pokemon.DisplayName')"
                                        title="Enviar por Email">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Paginaci√≥n mejorada -->
        <nav aria-label="Paginaci√≥n de Pok√©mon" class="mt-4">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <p class="pagination-info text-muted mb-0">
                        P√°gina @Model.CurrentPage de @Model.TotalPages
                    </p>
                </div>
                <div class="col-md-6">
                    <ul class="pagination justify-content-end mb-0">
                        <!-- Primera p√°gina -->
                        @if (Model.ShowFirstPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", "Pokemon", new { 
                                    page = 1, 
                                    nameFilter = Model.NameFilter, 
                                    typeFilter = Model.TypeFilter,
                                    minHeight = Model.MinHeight,
                                    maxHeight = Model.MaxHeight
                                })">
                                    <i class="fas fa-angle-double-left"></i>
                                </a>
                            </li>
                        }

                        <!-- Bot√≥n Anterior -->
                        <li class="page-item @(!Model.HasPrevious ? "disabled" : "")">
                            <a class="page-link" 
                               href="@Url.Action("Index", "Pokemon", new { 
                                   page = Model.CurrentPage - 1, 
                                   nameFilter = Model.NameFilter, 
                                   typeFilter = Model.TypeFilter,
                                   minHeight = Model.MinHeight,
                                   maxHeight = Model.MaxHeight
                               })">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>

                        <!-- N√∫meros de p√°gina -->
                        @for (int i = Model.StartPageNumber; i <= Model.EndPageNumber; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" 
                                   href="@Url.Action("Index", "Pokemon", new { 
                                       page = i, 
                                       nameFilter = Model.NameFilter, 
                                       typeFilter = Model.TypeFilter,
                                       minHeight = Model.MinHeight,
                                       maxHeight = Model.MaxHeight
                                   })">
                                    @i
                                </a>
                            </li>
                        }

                        <!-- Bot√≥n Siguiente -->
                        <li class="page-item @(!Model.HasNext ? "disabled" : "")">
                            <a class="page-link" 
                               href="@Url.Action("Index", "Pokemon", new { 
                                   page = Model.CurrentPage + 1, 
                                   nameFilter = Model.NameFilter, 
                                   typeFilter = Model.TypeFilter,
                                   minHeight = Model.MinHeight,
                                   maxHeight = Model.MaxHeight
                               })">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>

                        <!-- √öltima p√°gina -->
                        @if (Model.ShowLastPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", "Pokemon", new { 
                                    page = Model.TotalPages, 
                                    nameFilter = Model.NameFilter, 
                                    typeFilter = Model.TypeFilter,
                                    minHeight = Model.MinHeight,
                                    maxHeight = Model.MaxHeight
                                })">
                                    <i class="fas fa-angle-double-right"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    }
    else if (string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <!-- Mensaje cuando no hay resultados -->
        <div class="no-results text-center py-5">
            <div class="no-results-icon mb-3">
                <i class="fas fa-search fa-4x text-muted"></i>
            </div>
            <h4 class="text-muted">No se encontraron Pok√©mon</h4>
            <p class="text-muted">Intenta ajustar los filtros de b√∫squeda</p>
            @if (Model.HasFilters)
            {
                <a href="@Url.Action("Index", "Pokemon")" class="btn btn-outline-primary">
                    <i class="fas fa-refresh me-1"></i>
                    Limpiar filtros
                </a>
            }
        </div>
    }

    <!-- Modal para env√≠o de emails -->
    <div class="modal fade" id="emailModal" tabindex="-1" aria-labelledby="emailModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="emailModalLabel">
                        <i class="fas fa-envelope me-2"></i>
                        Enviar Email
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="emailForm">
                        <div class="mb-3">
                            <label for="recipientEmail" class="form-label">
                                <i class="fas fa-at me-1"></i>
                                Email del destinatario *
                            </label>
                            <input type="email" class="form-control" id="recipientEmail" name="recipientEmail" required 
                                   placeholder="ejemplo@correo.com">
                            <div class="invalid-feedback"></div>
                        </div>

                        <div class="mb-3">
                            <label for="recipientName" class="form-label">
                                <i class="fas fa-user me-1"></i>
                                Nombre del destinatario (opcional)
                            </label>
                            <input type="text" class="form-control" id="recipientName" name="recipientName" 
                                   placeholder="Nombre completo">
                        </div>

                        <div class="alert alert-info d-flex align-items-center">
                            <i class="fas fa-info-circle me-2"></i>
                            <div>
                                <strong id="emailSummary">Se enviar√° informaci√≥n de 1 Pok√©mon</strong>
                            </div>
                        </div>

                        <input type="hidden" id="emailPokemonIds" name="pokemonIds" value="">
                        <input type="hidden" id="emailType" name="emailType" value="single">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>
                        Cancelar
                    </button>
                    <button type="button" class="btn btn-primary" id="sendEmailBtn">
                        <i class="fas fa-paper-plane me-1"></i>
                        <span class="btn-text">Enviar Email</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para detalles del Pok√©mon -->
<div class="modal fade" id="pokemonDetailsModal" tabindex="-1" aria-labelledby="pokemonDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- Header del modal -->
            <div class="modal-header border-0" id="modalHeader">
                <h5 class="modal-title fw-bold text-white" id="pokemonDetailsModalLabel">
                    <i class="fas fa-paw me-2"></i>
                    <span id="modalPokemonName">Cargando...</span>
                    <span id="modalSpecialBadge" class="badge ms-2" style="display: none;"></span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Body del modal -->
            <div class="modal-body p-0">
                <!-- Estado de carga -->
                <div id="modalLoading" class="text-center py-5">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="text-muted">Cargando detalles del Pok√©mon...</p>
                </div>

                <!-- Contenido del modal -->
                <div id="modalContent" style="display: none;">
                    <!-- Secci√≥n de im√°genes e informaci√≥n b√°sica -->
                    <div class="row g-0">
                        <!-- Columna de im√°genes -->
                        <div class="col-md-5 position-relative">
                            <div class="p-4 text-center" id="modalImageSection">
                                <!-- Imagen principal -->
                                <img id="modalMainImage" src="" alt="Pok√©mon" class="img-fluid mb-3" style="max-height: 200px;">
                                
                                <!-- Imagen trasera (si est√° disponible) -->
                                <div id="modalBackImageContainer" style="display: none;">
                                    <p class="small text-muted mb-2">Vista trasera:</p>
                                    <img id="modalBackImage" src="" alt="Pok√©mon trasero" class="img-fluid" style="max-height: 150px;">
                                </div>
                                
                                <!-- ID del Pok√©mon -->
                                <div class="position-absolute top-0 end-0 m-2">
                                    <span class="badge bg-dark">#<span id="modalPokemonId">001</span></span>
                                </div>
                            </div>
                        </div>

                        <!-- Columna de informaci√≥n b√°sica -->
                        <div class="col-md-7">
                            <div class="p-4">
                                <!-- Informaci√≥n b√°sica -->
                                <div class="mb-3">
                                    <h6 class="fw-bold text-primary mb-2">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Informaci√≥n B√°sica
                                    </h6>
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <small class="text-muted d-block">Altura</small>
                                            <span class="fw-semibold" id="modalHeight">-</span>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted d-block">Peso</small>
                                            <span class="fw-semibold" id="modalWeight">-</span>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted d-block">Experiencia Base</small>
                                            <span class="fw-semibold" id="modalBaseExperience">-</span>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted d-block">Total Stats</small>
                                            <span class="fw-semibold" id="modalTotalStats">-</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Tipos -->
                                <div class="mb-3">
                                    <h6 class="fw-bold text-primary mb-2">
                                        <i class="fas fa-tags me-1"></i>
                                        Tipos
                                    </h6>
                                    <div id="modalTypes"></div>
                                </div>

                                <!-- Habilidades -->
                                <div class="mb-3">
                                    <h6 class="fw-bold text-primary mb-2">
                                        <i class="fas fa-star me-1"></i>
                                        Habilidades
                                    </h6>
                                    <div id="modalAbilities"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Secci√≥n de estad√≠sticas -->
                    <div class="border-top">
                        <div class="p-4">
                            <h6 class="fw-bold text-primary mb-3">
                                <i class="fas fa-chart-bar me-1"></i>
                                Estad√≠sticas Base
                            </h6>
                            <div id="modalStats"></div>
                        </div>
                    </div>

                    <!-- Secci√≥n de informaci√≥n de especies (si est√° disponible) -->
                    <div id="modalSpeciesSection" class="border-top" style="display: none;">
                        <div class="p-4">
                            <h6 class="fw-bold text-primary mb-3">
                                <i class="fas fa-book me-1"></i>
                                Informaci√≥n de Especies
                            </h6>
                            
                            <!-- Descripci√≥n -->
                            <div class="mb-3">
                                <p class="mb-2" id="modalDescription">-</p>
                                <small class="text-muted">
                                    <strong>Categor√≠a:</strong> <span id="modalCategory">-</span>
                                </small>
                            </div>

                            <!-- Informaci√≥n adicional en grid -->
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Habitat</small>
                                    <span class="fw-semibold" id="modalHabitat">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Generaci√≥n</small>
                                    <span class="fw-semibold" id="modalGeneration">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Tasa de Crecimiento</small>
                                    <span class="fw-semibold" id="modalGrowthRate">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Tasa de Captura</small>
                                    <span class="fw-semibold" id="modalCaptureRate">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Felicidad Base</small>
                                    <span class="fw-semibold" id="modalBaseHappiness">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Estado de error -->
                <div id="modalError" class="text-center py-5" style="display: none;">
                    <i class="fas fa-exclamation-triangle text-warning fs-1 mb-3"></i>
                    <h5 class="text-muted">Error al cargar</h5>
                    <p class="text-muted mb-3" id="modalErrorMessage">No se pudieron cargar los detalles del Pok√©mon</p>
                    <button type="button" class="btn btn-outline-primary" onclick="retryLoadPokemonDetails()">
                        <i class="fas fa-redo me-1"></i>
                        Reintentar
                    </button>
                </div>
            </div>

            <!-- Footer del modal -->
            <div class="modal-footer border-0 bg-light">
                <small class="text-muted me-auto">
                    <i class="fas fa-database me-1"></i>
                    Datos de <a href="https://pokeapi.co/" target="_blank" class="text-decoration-none">Pok√©API</a>
                </small>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>
                    Cerrar
                </button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pokemonDetailsModal" tabindex="-1" aria-labelledby="pokemonDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- Header del modal -->
            <div class="modal-header border-0" id="modalHeader">
                <h5 class="modal-title fw-bold text-white" id="pokemonDetailsModalLabel">
                    <i class="fas fa-paw me-2"></i>
                    <span id="modalPokemonName">Cargando...</span>
                    <span id="modalSpecialBadge" class="badge ms-2" style="display: none;"></span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Body del modal -->
            <div class="modal-body p-0">
                <!-- Estado de carga -->
                <div id="modalLoading" class="text-center py-5">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="text-muted">Cargando detalles del Pok√©mon...</p>
                </div>

                <!-- Contenido del modal -->
                <div id="modalContent" style="display: none;">
                    <!-- Secci√≥n de im√°genes e informaci√≥n b√°sica -->
                    <div class="row g-0">
                        <!-- Columna de im√°genes -->
                        <div class="col-md-5 position-relative">
                            <div class="p-4 text-center" id="modalImageSection">
                                <!-- Imagen principal -->
                                <img id="modalMainImage" src="" alt="Pok√©mon" class="img-fluid mb-3" style="max-height: 200px;">
                                
                                <!-- Imagen trasera (si est√° disponible) -->
                                <div id="modalBackImageContainer" style="display: none;">
                                    <p class="small text-muted mb-2">Vista trasera:</p>
                                    <img id="modalBackImage" src="" alt="Pok√©mon trasero" class="img-fluid" style="max-height: 150px;">
                                </div>
                                
                                <!-- ID del Pok√©mon -->
                                <div class="position-absolute top-0 end-0 m-2">
                                    <span class="badge bg-dark">#<span id="modalPokemonId">001</span></span>
                                </div>
                            </div>
                        </div>

                        <!-- Columna de informaci√≥n b√°sica -->
                        <div class="col-md-7">
                            <div class="p-4">
                                <!-- Informaci√≥n b√°sica -->
                                <div class="mb-3">
                                    <h6 class="fw-bold text-primary mb-2">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Informaci√≥n B√°sica
                                    </h6>
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <small class="text-muted d-block">Altura</small>
                                            <span class="fw-semibold" id="modalHeight">-</span>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted d-block">Peso</small>
                                            <span class="fw-semibold" id="modalWeight">-</span>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted d-block">Experiencia Base</small>
                                            <span class="fw-semibold" id="modalBaseExperience">-</span>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted d-block">Total Stats</small>
                                            <span class="fw-semibold" id="modalTotalStats">-</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Tipos -->
                                <div class="mb-3">
                                    <h6 class="fw-bold text-primary mb-2">
                                        <i class="fas fa-tags me-1"></i>
                                        Tipos
                                    </h6>
                                    <div id="modalTypes"></div>
                                </div>

                                <!-- Habilidades -->
                                <div class="mb-3">
                                    <h6 class="fw-bold text-primary mb-2">
                                        <i class="fas fa-star me-1"></i>
                                        Habilidades
                                    </h6>
                                    <div id="modalAbilities"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Secci√≥n de estad√≠sticas -->
                    <div class="border-top">
                        <div class="p-4">
                            <h6 class="fw-bold text-primary mb-3">
                                <i class="fas fa-chart-bar me-1"></i>
                                Estad√≠sticas Base
                            </h6>
                            <div id="modalStats"></div>
                        </div>
                    </div>

                    <!-- Secci√≥n de informaci√≥n de especies (si est√° disponible) -->
                    <div id="modalSpeciesSection" class="border-top" style="display: none;">
                        <div class="p-4">
                            <h6 class="fw-bold text-primary mb-3">
                                <i class="fas fa-book me-1"></i>
                                Informaci√≥n de Especies
                            </h6>
                            
                            <!-- Descripci√≥n -->
                            <div class="mb-3">
                                <p class="mb-2" id="modalDescription">-</p>
                                <small class="text-muted">
                                    <strong>Categor√≠a:</strong> <span id="modalCategory">-</span>
                                </small>
                            </div>

                            <!-- Informaci√≥n adicional en grid -->
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Habitat</small>
                                    <span class="fw-semibold" id="modalHabitat">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Generaci√≥n</small>
                                    <span class="fw-semibold" id="modalGeneration">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Tasa de Crecimiento</small>
                                    <span class="fw-semibold" id="modalGrowthRate">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Tasa de Captura</small>
                                    <span class="fw-semibold" id="modalCaptureRate">-</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted d-block">Felicidad Base</small>
                                    <span class="fw-semibold" id="modalBaseHappiness">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Estado de error -->
                <div id="modalError" class="text-center py-5" style="display: none;">
                    <i class="fas fa-exclamation-triangle text-warning fs-1 mb-3"></i>
                    <h5 class="text-muted">Error al cargar</h5>
                    <p class="text-muted mb-3" id="modalErrorMessage">No se pudieron cargar los detalles del Pok√©mon</p>
                    <button type="button" class="btn btn-outline-primary" onclick="retryLoadPokemonDetails()">
                        <i class="fas fa-redo me-1"></i>
                        Reintentar
                    </button>
                </div>
            </div>

            <!-- Footer del modal -->
            <div class="modal-footer border-0 bg-light">
                <small class="text-muted me-auto">
                    <i class="fas fa-database me-1"></i>
                    Datos de <a href="https://pokeapi.co/" target="_blank" class="text-decoration-none">Pok√©API</a>
                </small>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>
                    Cerrar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- CSS personalizado avanzado -->
<style>
    .text-gradient {
        background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .filter-card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .bg-gradient-primary {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }

    .pokemon-card {
        transition: all 0.3s ease;
        border: none;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
    }

    .pokemon-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .card-selector {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
    }

    .pokemon-image-container {
        position: relative;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        text-align: center;
        min-height: 140px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .pokemon-image {
        width: 100px;
        height: 100px;
        object-fit: contain;
        transition: transform 0.3s ease;
    }

    .pokemon-card:hover .pokemon-image {
        transform: scale(1.1);
    }

    .pokemon-id-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(255,255,255,0.9);
        color: #333;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.75em;
        font-weight: bold;
    }

    .pokemon-types {
        text-align: center;
    }

    .pokemon-type {
        font-size: 0.7em;
        margin: 0 2px;
    }

    /* Colores para tipos de Pok√©mon */
    .type-normal { background-color: #A8A878 !important; }
    .type-fire { background-color: #F08030 !important; }
    .type-water { background-color: #6890F0 !important; }
    .type-electric { background-color: #F8D030 !important; color: #333 !important; }
    .type-grass { background-color: #78C850 !important; }
    .type-ice { background-color: #98D8D8 !important; }
    .type-fighting { background-color: #C03028 !important; }
    .type-poison { background-color: #A040A0 !important; }
    .type-ground { background-color: #E0C068 !important; }
    .type-flying { background-color: #A890F0 !important; }
    .type-psychic { background-color: #F85888 !important; }
    .type-bug { background-color: #A8B820 !important; }
    .type-rock { background-color: #B8A038 !important; }
    .type-ghost { background-color: #705898 !important; }
    .type-dragon { background-color: #7038F8 !important; }
    .type-dark { background-color: #705848 !important; }
    .type-steel { background-color: #B8B8D0 !important; }
    .type-fairy { background-color: #EE99AC !important; }

    .pokemon-basic-stats {
        text-align: center;
        font-size: 0.85em;
    }

    .autocomplete-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-top: none;
        border-radius: 0 0 0.375rem 0.375rem;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        display: none;
    }

    .autocomplete-item {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
    }

    .autocomplete-item:hover {
        background-color: #f8f9fa;
    }

    .no-results-icon {
        opacity: 0.5;
    }

       /* Estilos para el modal de detalles */
    #pokemonDetailsModal .modal-content {
        border: none;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        overflow: hidden;
    }

    #pokemonDetailsModal .modal-header {
        background: linear-gradient(135deg, var(--pokemon-type-color, #6c5ce7), var(--pokemon-type-color-light, #a29bfe));
        border-radius: 15px 15px 0 0;
    }

    #pokemonDetailsModal .modal-body {
        max-height: 70vh;
        overflow-y: auto;
    }

    /* Barras de progreso para stats */
    .stat-bar {
        background-color: #e9ecef;
        border-radius: 10px;
        height: 20px;
        overflow: hidden;
        position: relative;
    }

    .stat-bar-fill {
        height: 100%;
        border-radius: 10px;
        background: linear-gradient(90deg, #28a745, #20c997, #17a2b8);
        transition: width 0.8s ease-in-out;
        position: relative;
    }

    .stat-bar-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 0.75rem;
        font-weight: bold;
        color: white;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        z-index: 1;
    }

    /* Badges de tipos */
    .type-badge {
        display: inline-block;
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        text-transform: capitalize;
        color: white;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    /* Badges de habilidades */
    .ability-badge {
        display: inline-block;
        padding: 0.3rem 0.6rem;
        border-radius: 15px;
        font-size: 0.75rem;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        color: #495057;
    }

    .ability-badge.hidden {
        background-color: #ffeaa7;
        border-color: #fdcb6e;
        color: #6c5ce7;
        font-weight: bold;
    }

    /* Animaciones */
    .modal.fade .modal-dialog {
        transform: scale(0.8);
        transition: transform 0.3s ease-out;
    }

    .modal.show .modal-dialog {
        transform: scale(1);
    }

    /* Spinner personalizado */
    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

  @*   /* Responsive para m√≥viles */
    @media (max-width: 768px) {
        #pokemonDetailsModal .modal-lg {
            max-width: 95%;
            margin: 1rem auto;
        }
        
        #pokemonDetailsModal .modal-body {
            max-height: 60vh;
        }
        
        .modal-body .row {
            flex-direction: column;
        }
    } *@

   @*  @media (max-width: 768px) {
        .pokemon-grid .col-xl-2,
        .pokemon-grid .col-lg-3 {
            flex: 0 0 auto;
            width: 50%;
        }
        
        .action-buttons .btn-group .btn span {
            display: none !important;
        }
    } *@
</style>

<!-- JavaScript mejorado -->
<script>
    // ====================================
    // VARIABLES GLOBALES
    // ====================================
    
    // Variables globales para manejo de estado
    let currentFilters = {
        page: @Model.CurrentPage,
        name: '@Model.NameFilter',
        typeName: '@Model.TypeFilter',
        minHeight: @(Model.MinHeight?.ToString() ?? "null"),
        maxHeight: @(Model.MaxHeight?.ToString() ?? "null")
    };

    // Variable global para almacenar el ID del Pok√©mon actual (para retry)
    let currentPokemonId = null;

    // ====================================
    // FUNCIONALIDAD DEL MODAL DE DETALLES
    // ====================================

    /**
     * Abre el modal de detalles del Pok√©mon
     */
    function showPokemonDetails(pokemonId) {
        if (!pokemonId || pokemonId <= 0) {
            console.error('ID de Pok√©mon inv√°lido:', pokemonId);
            return;
        }

        currentPokemonId = pokemonId;
        
        // Abrir el modal
        const modal = new bootstrap.Modal(document.getElementById('pokemonDetailsModal'));
        modal.show();
        
        // Resetear el modal al estado de carga
        resetModalToLoading();
        
        // Cargar los datos del Pok√©mon
        loadPokemonDetails(pokemonId);
    }

    /**
     * Resetea el modal al estado de carga inicial
     */
    function resetModalToLoading() {
        // Mostrar loading, ocultar contenido y error
        document.getElementById('modalLoading').style.display = 'block';
        document.getElementById('modalContent').style.display = 'none';
        document.getElementById('modalError').style.display = 'none';
        
        // Resetear t√≠tulo
        document.getElementById('pokemonDetailsModalLabel').innerHTML = 
            '<i class="fas fa-paw me-2"></i>Cargando...';
        
        // Resetear header a color por defecto
        const modalHeader = document.getElementById('modalHeader');
        modalHeader.style.background = 'linear-gradient(135deg, #6c5ce7, #a29bfe)';
        modalHeader.style.setProperty('--pokemon-type-color', '#6c5ce7');
        modalHeader.style.setProperty('--pokemon-type-color-light', '#a29bfe');
    }

    /**
     * Carga los detalles del Pok√©mon via AJAX
     */
    async function loadPokemonDetails(pokemonId) {
        try {
            console.log('Cargando detalles del Pok√©mon ID:', pokemonId);
            
            // Realizar petici√≥n AJAX
            const response = await fetch(`/Pokemon/GetPokemonDetails?id=${pokemonId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success && result.pokemon) {
                console.log('Detalles del Pok√©mon cargados exitosamente:', result.pokemon);
                populateModal(result.pokemon);
            } else {
                throw new Error(result.message || 'No se pudieron cargar los detalles del Pok√©mon');
            }

        } catch (error) {
            console.error('Error al cargar detalles del Pok√©mon:', error);
            showModalError(error.message || 'Error de conexi√≥n');
        }
    }

    /**
     * Llena el modal con los datos del Pok√©mon
     */
    function populateModal(pokemon) {
        try {
            document.getElementById('pokemonDetailsModalLabel').innerHTML = 
            `<i class="fas fa-paw me-2"></i>${pokemon.name}`;
            
            // Actualizar header con color del tipo principal
            updateModalHeader(pokemon);
            
            // Informaci√≥n b√°sica
            document.getElementById('modalPokemonName').textContent = pokemon.name;
            document.getElementById('modalPokemonId').textContent = pokemon.id.toString().padStart(3, '0');
            document.getElementById('modalHeight').textContent = pokemon.height;
            document.getElementById('modalWeight').textContent = pokemon.weight;
            document.getElementById('modalBaseExperience').textContent = pokemon.baseExperience;
            document.getElementById('modalTotalStats').textContent = pokemon.totalStats;

            // Im√°genes
            updateModalImages(pokemon);
            
            // Badge de especial (legendario/m√≠tico)
            updateSpecialBadge(pokemon);
            
            // Tipos
            updateModalTypes(pokemon.types, pokemon.typeColor);
            
            // Habilidades
            updateModalAbilities(pokemon.abilities);
            
            // Estad√≠sticas
            updateModalStats(pokemon.stats);
            
            // Informaci√≥n de especies (si est√° disponible)
            updateModalSpecies(pokemon.species);
            
            // Mostrar contenido y ocultar loading
            document.getElementById('modalLoading').style.display = 'none';
            document.getElementById('modalContent').style.display = 'block';
            
            console.log('Modal poblado exitosamente');
            
        } catch (error) {
            console.error('Error al poblar el modal:', error);
            showModalError('Error al procesar los datos del Pok√©mon');
        }
    }

    /**
     * Actualiza el header del modal con el color del tipo
     */
    function updateModalHeader(pokemon) {
        const modalHeader = document.getElementById('modalHeader');
        const typeColor = pokemon.typeColor || '#6c5ce7';
        
        // Crear color m√°s claro para el gradiente
        const lightColor = lightenColor(typeColor, 20);
        
        modalHeader.style.background = `linear-gradient(135deg, ${typeColor}, ${lightColor})`;
        modalHeader.style.setProperty('--pokemon-type-color', typeColor);
        modalHeader.style.setProperty('--pokemon-type-color-light', lightColor);
    }

    /**
     * Actualiza las im√°genes del modal
     */
    function updateModalImages(pokemon) {
        const mainImage = document.getElementById('modalMainImage');
        const backImage = document.getElementById('modalBackImage');
        const backImageContainer = document.getElementById('modalBackImageContainer');
        
        // Imagen principal
        mainImage.src = pokemon.mainImage;
        mainImage.alt = `${pokemon.name} - Vista frontal`;
        
        // Imagen trasera (si est√° disponible)
        if (pokemon.backImage) {
            backImage.src = pokemon.backImage;
            backImage.alt = `${pokemon.name} - Vista trasera`;
            backImageContainer.style.display = 'block';
        } else {
            backImageContainer.style.display = 'none';
        }
    }

    /**
     * Actualiza el badge de Pok√©mon especial
     */
    function updateSpecialBadge(pokemon) {
        const specialBadge = document.getElementById('modalSpecialBadge');
        
        if (pokemon.isSpecial && pokemon.specialLabel) {
            specialBadge.textContent = pokemon.specialLabel;
            specialBadge.className = pokemon.specialLabel === 'Legendario' ? 
                'badge ms-2 bg-warning text-dark' : 'badge ms-2 bg-danger';
            specialBadge.style.display = 'inline-block';
        } else {
            specialBadge.style.display = 'none';
        }
    }

    /**
     * Actualiza los tipos del Pok√©mon
     */
    function updateModalTypes(types, typeColor) {
        const typesContainer = document.getElementById('modalTypes');
        typesContainer.innerHTML = '';
        
        types.forEach(type => {
            const badge = document.createElement('span');
            badge.className = 'type-badge';
            badge.textContent = type.name;
            badge.style.backgroundColor = getTypeColor(type.name.toLowerCase());
            typesContainer.appendChild(badge);
        });
    }

    /**
     * Actualiza las habilidades del Pok√©mon
     */
    function updateModalAbilities(abilities) {
        const abilitiesContainer = document.getElementById('modalAbilities');
        abilitiesContainer.innerHTML = '';
        
        abilities.forEach(ability => {
            const badge = document.createElement('span');
            badge.className = ability.isHidden ? 'ability-badge hidden' : 'ability-badge';
            badge.textContent = ability.name + (ability.isHidden ? ' (Oculta)' : '');
            abilitiesContainer.appendChild(badge);
        });
    }

    /**
     * Actualiza las estad√≠sticas del Pok√©mon
     */
    function updateModalStats(stats) {
        const statsContainer = document.getElementById('modalStats');
        statsContainer.innerHTML = '';
        
        const statNames = {
            'hp': 'HP',
            'attack': 'Ataque',
            'defense': 'Defensa',
            'special-attack': 'At. Especial',
            'special-defense': 'Def. Especial',
            'speed': 'Velocidad'
        };
        
        stats.forEach(stat => {
            const statName = statNames[stat.name] || stat.name;
            const percentage = Math.min((stat.baseStat / 255) * 100, 100); // 255 es el m√°ximo te√≥rico
            
            const statRow = document.createElement('div');
            statRow.className = 'row mb-2 align-items-center';
            statRow.innerHTML = `
                <div class="col-4">
                    <small class="fw-semibold">${statName}</small>
                </div>
                <div class="col-6">
                    <div class="stat-bar">
                        <div class="stat-bar-fill" style="width: ${percentage}%"></div>
                        <div class="stat-bar-text">${stat.baseStat}</div>
                    </div>
                </div>
                <div class="col-2 text-end">
                    <small class="text-muted">${stat.baseStat}</small>
                </div>
            `;
            
            statsContainer.appendChild(statRow);
        });
    }

    /**
     * Actualiza la informaci√≥n de especies del Pok√©mon
     */
    function updateModalSpecies(species) {
        const speciesSection = document.getElementById('modalSpeciesSection');
        
        if (species) {
            // Poblar informaci√≥n de especies
            document.getElementById('modalDescription').textContent = species.description;
            document.getElementById('modalCategory').textContent = species.category;
            document.getElementById('modalHabitat').textContent = species.habitat;
            document.getElementById('modalGeneration').textContent = species.generation;
            document.getElementById('modalGrowthRate').textContent = species.growthRate;
            document.getElementById('modalCaptureRate').textContent = species.captureRate;
            document.getElementById('modalBaseHappiness').textContent = species.baseHappiness;
            
            speciesSection.style.display = 'block';
        } else {
            speciesSection.style.display = 'none';
        }
    }

    /**
     * Muestra el estado de error en el modal
     */
    function showModalError(message) {
        document.getElementById('modalLoading').style.display = 'none';
        document.getElementById('modalContent').style.display = 'none';
        document.getElementById('modalError').style.display = 'block';
        document.getElementById('modalErrorMessage').textContent = message;
    }

    /**
     * Funci√≥n para reintentar cargar los detalles (llamada desde el bot√≥n de error)
     */
    function retryLoadPokemonDetails() {
        if (currentPokemonId) {
            resetModalToLoading();
            loadPokemonDetails(currentPokemonId);
        }
    }

    /**
     * Obtiene el color de un tipo espec√≠fico
     */
    function getTypeColor(typeName) {
        const typeColors = {
            'normal': '#A8A878',
            'fire': '#F08030',
            'water': '#6890F0',
            'electric': '#F8D030',
            'grass': '#78C850',
            'ice': '#98D8D8',
            'fighting': '#C03028',
            'poison': '#A040A0',
            'ground': '#E0C068',
            'flying': '#A890F0',
            'psychic': '#F85888',
            'bug': '#A8B820',
            'rock': '#B8A038',
            'ghost': '#705898',
            'dragon': '#7038F8',
            'dark': '#705848',
            'steel': '#B8B8D0',
            'fairy': '#EE99AC'
        };
        
        return typeColors[typeName] || '#68D391';
    }

    /**
     * Hace un color m√°s claro
     */
    function lightenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) + amt;
        const G = (num >> 8 & 0x00FF) + amt;
        const B = (num & 0x0000FF) + amt;
        
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255))
            .toString(16).slice(1);
    }

    // ====================================
    // FUNCIONES DE EMAILS (MANTENIDAS)
    // ====================================

    /**
     * Abre el modal de email para un Pok√©mon individual
     */
    function openEmailModal(pokemonId, pokemonName) {
        // Configurar modal para env√≠o individual
        document.getElementById('emailModalLabel').innerHTML = 
            '<i class="fas fa-envelope me-2"></i>Enviar Email - ' + pokemonName;
        document.getElementById('emailSummary').textContent = 
            'Se enviar√° informaci√≥n de: ' + pokemonName;
        document.getElementById('emailPokemonIds').value = pokemonId;
        document.getElementById('emailType').value = 'single';

        // Limpiar formulario
        document.getElementById('emailForm').reset();
        document.getElementById('emailPokemonIds').value = pokemonId;

        // Mostrar modal
        const modal = new bootstrap.Modal(document.getElementById('emailModal'));
        modal.show();
    }

    /**
     * Abre el modal de email para m√∫ltiples Pok√©mon seleccionados
     */
    function openMultipleEmailModal() {
        const selectedIds = getSelectedPokemonIds();

        if (selectedIds.length === 0) {
            showAlert('Por favor selecciona al menos un Pok√©mon para enviar por email', 'warning');
            return;
        }

        // Configurar modal para env√≠o m√∫ltiple
        document.getElementById('emailModalLabel').innerHTML = 
            '<i class="fas fa-envelope me-2"></i>Enviar Email Masivo';
        document.getElementById('emailSummary').textContent = 
            'Se enviar√° informaci√≥n de ' + selectedIds.length + ' Pok√©mon seleccionados';
        document.getElementById('emailPokemonIds').value = selectedIds.join(',');
        document.getElementById('emailType').value = 'multiple';

        // Limpiar formulario
        document.getElementById('emailForm').reset();
        document.getElementById('emailPokemonIds').value = selectedIds.join(',');

        // Mostrar modal
        const modal = new bootstrap.Modal(document.getElementById('emailModal'));
        modal.show();
    }

    /**
     * Verifica si la configuraci√≥n de email est√° disponible
     */
    async function checkEmailConfiguration() {
        try {
            const response = await fetch('/Pokemon/CheckEmailConfiguration');
            const data = await response.json();
            return data.isConfigured;
        } catch (error) {
            console.error('Error verificando configuraci√≥n de email:', error);
            return false;
        }
    }

    /**
     * Env√≠a el email seg√∫n el tipo configurado
     */
    async function sendEmail() {
        const form = document.getElementById('emailForm');
        const sendBtn = document.getElementById('sendEmailBtn');
        const btnText = sendBtn.querySelector('.btn-text');

        // Validar formulario
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        // Verificar configuraci√≥n de email
        const isConfigured = await checkEmailConfiguration();
        if (!isConfigured) {
            showAlert('La configuraci√≥n de email no est√° disponible. Contacta al administrador.', 'error');
            return;
        }

        // Mostrar estado de carga
        sendBtn.disabled = true;
        btnText.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Enviando...';

        try {
            const formData = new FormData(form);
            const emailType = document.getElementById('emailType').value;
            const pokemonIds = document.getElementById('emailPokemonIds').value.split(',').map(id => parseInt(id.trim()));

            const requestData = {
                recipientEmail: formData.get('recipientEmail'),
                recipientName: formData.get('recipientName') || '',
                pokemonIds: pokemonIds,
                emailType: emailType === 'multiple' ? 1 : 0 // Enum: Single=0, Multiple=1
            };

            const endpoint = emailType === 'multiple' 
                ? '/Pokemon/SendMultiplePokemonEmails' 
                : '/Pokemon/SendSinglePokemonEmail';

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(requestData)
            });

            const result = await response.json();

            if (result.success) {
                showAlert(result.message, 'success');
                // Cerrar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('emailModal'));
                modal.hide();

                // Limpiar selecci√≥n si fue env√≠o m√∫ltiple
                if (emailType === 'multiple') {
                    clearAllSelections();
                }
            } else {
                showAlert(result.message || 'Error al enviar el email', 'error');
            }

        } catch (error) {
            console.error('Error enviando email:', error);
            showAlert('Error de red al enviar el email. Int√©ntalo de nuevo.', 'error');
        } finally {
            // Restaurar bot√≥n
            sendBtn.disabled = false;
            btnText.innerHTML = '<i class="fas fa-paper-plane me-1"></i>Enviar Email';
        }
    }

    // ====================================
    // FUNCIONES DE EXPORTACI√ìN (MANTENIDAS)
    // ====================================

    /**
     * Exporta los Pok√©mon seleccionados a Excel
     */
    function exportSelectedToExcel() {
        const selectedIds = getSelectedPokemonIds();
        
        if (selectedIds.length === 0) {
            showAlert('Por favor selecciona al menos un Pok√©mon para exportar', 'warning');
            return;
        }

        showAlert(`Exportando ${selectedIds.length} Pok√©mon seleccionados...`, 'info');

        fetch('/Pokemon/ExportSelectedToExcel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify(selectedIds)
        })
        .then(response => {
            if (!response.ok) throw new Error('Error en la exportaci√≥n');
            return response.blob();
        })
        .then(blob => {
            downloadFile(blob, `Pokemon_Seleccionados_${new Date().toISOString().slice(0,10)}.xlsx`);
            showAlert('¬°Exportaci√≥n completada exitosamente!', 'success');
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('Error al exportar los Pok√©mon seleccionados', 'danger');
        });
    }

    /**
     * Exporta un Pok√©mon individual a Excel
     */
    function exportSingleToExcel(pokemonId, pokemonName) {
        showAlert(`Exportando ${pokemonName}...`, 'info');

        fetch(`/Pokemon/ExportSingleToExcel?id=${pokemonId}`)
        .then(response => {
            if (!response.ok) throw new Error('Error en la exportaci√≥n individual');
            return response.blob();
        })
        .then(blob => {
            downloadFile(blob, `Pokemon_${pokemonName}_${new Date().toISOString().slice(0,10)}.xlsx`);
            showAlert(`¬°${pokemonName} exportado exitosamente!`, 'success');
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert(`Error al exportar ${pokemonName}`, 'danger');
        });
    }

    /**
     * Exporta todos los Pok√©mon de la p√°gina actual
     */
    function exportCurrentPageToExcel() {
        showAlert('Exportando p√°gina actual...', 'info');

        fetch('/Pokemon/ExportCurrentPageToExcel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify(currentFilters)
        })
        .then(response => {
            if (!response.ok) throw new Error('Error en la exportaci√≥n de p√°gina');
            return response.blob();
        })
        .then(blob => {
            downloadFile(blob, `Pokemon_Pagina_${currentFilters.page}_${new Date().toISOString().slice(0,10)}.xlsx`);
            showAlert('¬°P√°gina exportada exitosamente!', 'success');
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('Error al exportar la p√°gina actual', 'danger');
        });
    }

    // ====================================
    // FUNCIONES AUXILIARES (MANTENIDAS)
    // ====================================

    /**
     * Limpia todas las selecciones de checkboxes
     */
    function clearAllSelections() {
        const checkboxes = document.querySelectorAll('.pokemon-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
        });

        const selectAllCheckbox = document.getElementById('selectAll');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        }

        updateSelectedCount();
    }

    /**
     * Obtiene los IDs de los Pok√©mon seleccionados
     */
    function getSelectedPokemonIds() {
        const checkboxes = document.querySelectorAll('.pokemon-checkbox:checked');
        return Array.from(checkboxes).map(cb => parseInt(cb.value));
    }

    /**
     * Descarga un archivo blob
     */
    function downloadFile(blob, filename) {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    }

    /**
     * Muestra alertas al usuario
     */
    function showAlert(message, type = 'info') {
        // Crear elemento de alerta
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        document.body.appendChild(alertDiv);

        // Auto-remover despu√©s de 5 segundos
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }

    // ====================================
    // FUNCIONES DE COMPATIBILIDAD (MANTENIDAS)
    // ====================================

    /**
     * Funci√≥n de compatibilidad para exportSinglePokemon
     */
    function exportSinglePokemon(pokemonId) {
        // Obtener el nombre del Pok√©mon desde el DOM
        const pokemonCard = document.querySelector(`[data-pokemon-id="${pokemonId}"]`);
        const pokemonName = pokemonCard ? pokemonCard.querySelector('.pokemon-name').textContent.trim() : 'Pokemon';
        
        return exportSingleToExcel(pokemonId, pokemonName);
    }
    
    /**
     * Funci√≥n de compatibilidad para exportToExcel
     */
    function exportToExcel() {
        return exportSelectedToExcel();
    }
    
    /**
     * Funci√≥n para seleccionar todos (alias de toggleSelectAll)
     */
    function selectAll() {
        const selectAllCheckbox = document.getElementById('selectAll');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = !selectAllCheckbox.checked;
            toggleSelectAll();
        }
    }
    
    /**
     * Funci√≥n para limpiar un campo de filtro
     */
    function clearField(fieldId) {
        const field = document.getElementById(fieldId);
        if (field) {
            field.value = '';
            field.focus();
        }
    }

    // ====================================
    // FUNCIONALIDAD EXISTENTE (MANTENIDA)
    // ====================================

    // Funci√≥n para alternar selecci√≥n de todos los checkboxes
    function toggleSelectAll() {
        const selectAllCheckbox = document.getElementById('selectAll');
        const pokemonCheckboxes = document.querySelectorAll('.pokemon-checkbox');
        
        pokemonCheckboxes.forEach(checkbox => {
            checkbox.checked = selectAllCheckbox.checked;
        });

        updateSelectedCount();
    }

    // Funci√≥n para actualizar contador de seleccionados
    function updateSelectedCount() {
        const selectedCount = document.querySelectorAll('.pokemon-checkbox:checked').length;
        const totalCount = document.querySelectorAll('.pokemon-checkbox').length;

        const countElement = document.getElementById('selectedCount');
        if (countElement) {
            countElement.textContent = `${selectedCount} de ${totalCount} seleccionados`;
        }

        // Actualizar estado del bot√≥n de exportar seleccionados
        const exportButton = document.querySelector('[onclick="exportSelectedToExcel()"]');
        if (exportButton) {
            exportButton.disabled = selectedCount === 0;
            if (selectedCount === 0) {
                exportButton.classList.add('btn-secondary');
                exportButton.classList.remove('btn-success');
            } else {
                exportButton.classList.remove('btn-secondary');
                exportButton.classList.add('btn-success');
            }
        }

        // Actualizar estado del bot√≥n de email masivo
        const emailButton = document.querySelector('[onclick="openMultipleEmailModal()"]');
        if (emailButton) {
            emailButton.disabled = selectedCount === 0;
            if (selectedCount === 0) {
                emailButton.classList.add('btn-secondary');
                emailButton.classList.remove('btn-info');
            } else {
                emailButton.classList.remove('btn-secondary');
                emailButton.classList.add('btn-info');
            }
        }
    }

    // Funci√≥n para alternar filtros
    function toggleFilters() {
        const filtersSection = document.getElementById('filtersSection');
        const toggleIcon = document.querySelector('#toggleFilters i');
        
        if (filtersSection.style.display === 'none') {
            filtersSection.style.display = 'block';
            toggleIcon.className = 'fas fa-chevron-up';
        } else {
            filtersSection.style.display = 'none';
            toggleIcon.className = 'fas fa-chevron-down';
        }
    }

    // ====================================
    // INICIALIZACI√ìN
    // ====================================

    // Inicializaci√≥n cuando carga la p√°gina
    document.addEventListener('DOMContentLoaded', function() {
        // Configurar eventos de checkboxes individuales
        document.querySelectorAll('.pokemon-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                updateSelectedCount();
                
                // Actualizar estado del "Seleccionar Todo"
                const selectAllCheckbox = document.getElementById('selectAll');
                const totalCheckboxes = document.querySelectorAll('.pokemon-checkbox').length;
                const checkedCheckboxes = document.querySelectorAll('.pokemon-checkbox:checked').length;
                
                selectAllCheckbox.checked = checkedCheckboxes === totalCheckboxes;
                selectAllCheckbox.indeterminate = checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes;
            });
        });

        // Event listeners para emails
        const sendEmailBtn = document.getElementById('sendEmailBtn');
        if (sendEmailBtn) {
            sendEmailBtn.addEventListener('click', sendEmail);
        }

        // Validaci√≥n en tiempo real del email
        const emailInput = document.getElementById('recipientEmail');
        if (emailInput) {
            emailInput.addEventListener('input', function() {
                const isValid = this.checkValidity();
                this.classList.toggle('is-valid', isValid && this.value.length > 0);
                this.classList.toggle('is-invalid', !isValid && this.value.length > 0);
            });
        }

        // Configuraci√≥n inicial
        updateSelectedCount();
        
        console.log('üöÄ Sistema de exportaci√≥n a Excel inicializado correctamente');
        console.log('üéØ Modal de detalles de Pok√©mon inicializado correctamente');
    });

    // ====================================
    // INTEGRACI√ìN DEL SISTEMA DE CACHE
    // ====================================

    /**
     * OVERRIDE: Funci√≥n showPokemonDetails mejorada con cache
     * Reemplaza la funci√≥n original para usar el sistema de cache
     */
    function showPokemonDetails(pokemonId) {
        if (!pokemonId || pokemonId <= 0) {
            console.error('ID de Pok√©mon inv√°lido:', pokemonId);
            return;
        }

        currentPokemonId = pokemonId;
        
        // Abrir el modal
        const modal = new bootstrap.Modal(document.getElementById('pokemonDetailsModal'));
        modal.show();
        
        // Resetear el modal al estado de carga
        resetModalToLoading();
        
        // Cargar los datos del Pok√©mon CON CACHE
        loadPokemonDetailsWithCache(pokemonId);
    }

    /**
     * NUEVO: Funci√≥n para precargar Pok√©mon populares en cache
     */
    function preloadPopularPokemon() {
        const popularIds = [1, 25, 6, 9, 3, 150, 151, 384, 448, 52]; // Bulbasaur, Pikachu, etc.
        
        console.log('üöÄ Precargando Pok√©mon populares...');
        
        popularIds.forEach(async (id, index) => {
            // Esperar un poco entre cada precarga para no saturar
            setTimeout(async () => {
                const cached = pokemonCache.get(id.toString(), 'details');
                if (!cached) {
                    try {
                        const response = await fetch(`/Pokemon/GetPokemonDetails?id=${id}`);
                        if (response.ok) {
                            const result = await response.json();
                            if (result.success && result.pokemon) {
                                pokemonCache.set(id.toString(), result.pokemon, 'details');
                                console.log('üìã Precargado:', result.pokemon.name);
                            }
                        }
                    } catch (error) {
                        console.log('‚ö†Ô∏è Error precargando Pok√©mon', id, ':', error.message);
                    }
                }
            }, index * 500); // 500ms entre cada precarga
        });
    }

    /**
     * NUEVO: Cache para tipos de Pok√©mon
     */
    async function loadPokemonTypesWithCache() {
        const cached = pokemonCache.get('all_types', 'types');
        
        if (cached && cached.data) {
            console.log('üìã Tipos cargados desde cache');
            return cached.data;
        }

        try {
            // Esta funci√≥n asume que tienes un endpoint para obtener tipos
            // Si no lo tienes, puedes omitir esta parte
            const response = await fetch('/Pokemon/GetPokemonTypes');
            if (response.ok) {
                const types = await response.json();
                pokemonCache.set('all_types', types, 'types');
                console.log('üåê Tipos cargados desde servidor y cacheados');
                return types;
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Error cargando tipos:', error.message);
        }
        
        return null;
    }

    /**
     * NUEVO: Badge visual para mostrar datos cacheados
     */
    function addCacheBadgesToCards() {
        document.querySelectorAll('.pokemon-card').forEach(card => {
            const pokemonId = card.dataset.pokemonId;
            if (pokemonId) {
                const cached = pokemonCache.get(pokemonId, 'details');
                if (cached) {
                    // Remover badge anterior si existe
                    const existingBadge = card.querySelector('.cache-badge');
                    if (existingBadge) {
                        existingBadge.remove();
                    }

                    // Crear nuevo badge
                    const badge = document.createElement('div');
                    badge.className = cached.isNearExpiry ? 'cache-badge warning near-expiry' : 'cache-badge';
                    badge.innerHTML = cached.isNearExpiry ? '‚è∞' : 'üíæ';
                    badge.title = cached.isNearExpiry ? 'Cache pr√≥ximo a expirar' : 'Datos en cache';
                    
                    card.style.position = 'relative';
                    card.appendChild(badge);
                }
            }
        });
    }

    /**
     * NUEVO: Panel de estad√≠sticas del cache (solo en desarrollo)
     */
    function createCacheStatsPanel() {
        if (window.location.hostname !== 'localhost') return;

        const panel = document.createElement('div');
        panel.className = 'cache-stats-panel';
        panel.innerHTML = `
            <strong>Cache Stats</strong><br>
            <span id="cacheStatsContent">Cargando...</span><br>
            <small>
                <a href="#" onclick="showCacheStats(); return false;">Actualizar</a> |
                <a href="#" onclick="clearPokemonCache(); return false;">Limpiar</a>
            </small>
        `;
        
        document.body.appendChild(panel);

        // Mostrar/ocultar con Ctrl+Shift+C
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.shiftKey && e.key === 'C') {
                const isVisible = panel.style.display !== 'none';
                panel.style.display = isVisible ? 'none' : 'block';
                
                if (!isVisible) {
                    updateCacheStatsPanel();
                }
            }
        });
    }

    /**
     * Actualiza el panel de estad√≠sticas
     */
    function updateCacheStatsPanel() {
        const contentEl = document.getElementById('cacheStatsContent');
        if (contentEl) {
            const stats = pokemonCache.getStats();
            if (stats) {
                const sizeKB = Math.round(stats.totalSize / 1024);
                contentEl.innerHTML = `
                    Items: ${stats.totalItems}<br>
                    Tama√±o: ${sizeKB}KB<br>
                    Por expirar: ${stats.nearExpiry}
                `;
            }
        }
    }

    // ====================================
    // INICIALIZACI√ìN MEJORADA CON CACHE
    // ====================================

    // Ejecutar cuando carga la p√°gina
    document.addEventListener('DOMContentLoaded', function() {
        // Mostrar badges de cache en las cards existentes
        @* setTimeout(() => {
            addCacheBadgesToCards();
        }, 1000);
 *@
        // Precargar Pok√©mon populares despu√©s de 3 segundos
        setTimeout(() => {
            preloadPopularPokemon();
        }, 3000);

        // Crear panel de stats en desarrollo
        createCacheStatsPanel();

        // Actualizar badges cada 30 segundos
        @* setInterval(() => {
            addCacheBadgesToCards();
            updateCacheStatsPanel();
        }, 30000); *@

        console.log('üíæ Sistema de cache integrado completamente');
    });

    // ====================================
    // FUNCIONES DE COMPATIBILIDAD
    // ====================================

    /**
     * Funci√≥n para limpiar cache cuando se apliquen nuevos filtros
     * Llamar esta funci√≥n cuando cambien los filtros de b√∫squeda
     */
    function onFiltersChanged() {
        // Cache de filtros para futura implementaci√≥n
        cacheFilterState(currentFilters);
        
        // Limpiar badges de cache de cards que ya no son relevantes
        setTimeout(() => {
            addCacheBadgesToCards();
        }, 500);
    }
</script>